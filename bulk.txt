---
title: "Bulk RNA-seq analysis of phosphatases-related genes"
author: "Cristian Alin Cucu"
format:
  html:
    self-contained: true
    toc: true
    number-sections: true
    code-fold: show
    code-tools: true
editor: visual
execute:
  warning: false
  message: false
---

```{r}
## This analysis was developed with assistance from Claude-Sonnet 4.0 (Anthropic) AI tool for plot visual optimization and code debugging. Main workflow, data interpretation and methodology were done by the author.
## Configuration
# Load required packages
# CRAN packages for data manipulation, visualization, and reporting
required_cran <- c(
  "dplyr", "tibble", "tidyr", "stringr", "purrr", "here", 
  "ggplot2", "ggrepel", "ggpubr", "patchwork",
  "RColorBrewer", "knitr", "kableExtra", "readr")
# Bioconductor packages for genomic analysis
required_bioc <- c("TCGAbiolinks", "DESeq2", "SummarizedExperiment", "biomaRt")
# Function to install missing packages
install_if_missing <- function(pkgs, type) {
  missing <- pkgs[!pkgs %in% rownames(installed.packages())]
  if (length(missing) == 0) return(invisible())
  
  if (type == "cran") {
    install.packages(missing, dependencies = TRUE)
  } else if (type == "bioc") {
    if (!requireNamespace("BiocManager", quietly = TRUE)) {
      install.packages("BiocManager")
    }
    BiocManager::install(missing, dependencies = TRUE, ask = FALSE)
  }
}
# Install missing packages
install_if_missing(required_cran, "cran")
install_if_missing(required_bioc, "bioc")
# Load all required libraries with suppressed startup messages
suppressPackageStartupMessages({
  library(TCGAbiolinks)
  library(DESeq2)
  library(SummarizedExperiment)
  library(biomaRt)
  library(dplyr)
  library(tibble)
  library(tidyr)
  library(stringr)
  library(purrr)
  library(here)
  library(ggplot2)
  library(ggrepel)
  library(ggpubr)
  library(patchwork)
  library(RColorBrewer)
  library(knitr)
  library(kableExtra)
  library(readr)
})

# Set up directory structure using relative paths
data_path    <- here("data")
results_path <- here("results")
dir.create(data_path, recursive = TRUE, showWarnings = FALSE)
dir.create(results_path, recursive = TRUE, showWarnings = FALSE)

# Define genes of interest (phosphatases-related genes)
genes_of_interest <- c(
  "PPP2CA", "PPP2CB",                   # Catalytic subunits
  "PPP2R5A", "PPP2R5D", "STRN",         # PP2A regulatory subunits
  "CIP2A", "SET",  "ANP32A", "ANP32B",  # PP2A-B56 inhibitors
  "MASTL", "ENSA", "ARPP19",            # PP2A-B55 inhibitors
  "LCMT1", "PPME1",                     # PP2A methyltransferase
  "PPP1CA", "PPP1CB" ,                  # PP1 catalytic subunits
  "MRAS", "SHOC2",                      # PP1 interactors
  "SPRED1", "NF1"                       # MAPK regulators
)

# Define publication-ready theme for consistent plot styling
theme_publication <- function(base_size = 12) {
  theme_minimal(base_size = base_size) +
    theme(
      plot.title = element_text(size = base_size + 2, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = base_size, hjust = 0.5, color = "grey50"),
      axis.title = element_text(size = base_size),
      legend.position = "top", 
      legend.title = element_text(face = "bold"),
      strip.text = element_text(face = "bold"),
      panel.grid.minor = element_blank(),
      panel.border = element_rect(color = "grey80", fill = NA, linewidth = 0.5)
    )
}
```

```{r}
## TCGA data downloading and processing
# Function to download TCGA data
download_tcga_data <- function(project_id, tumor_limit = 100) {
  # Check if data already exists locally to avoid re-downloading
  local_file <- file.path(data_path, paste0(project_id, "_data.rds"))
  if (file.exists(local_file)) {
    cat("Loading cached data for", project_id, "\n")
    return(readRDS(local_file))
  }
  
  # Query TCGA for RNA-seq data
  # Using STAR - Counts workflow which provides raw counts suitable for DESeq2
  query <- GDCquery(
    project = project_id,
    data.category = "Transcriptome Profiling",
    data.type = "Gene Expression Quantification",
    workflow.type = "STAR - Counts",
    sample.type = c("Solid Tissue Normal", "Primary Tumor")
  )
  
  # Get query results and implement deterministic sample selection
  results <- getResults(query)
  normal_samples <- results[results$sample_type == "Solid Tissue Normal", ]
  tumor_samples_all <- results[results$sample_type == "Primary Tumor", ]
  
  # Take first 100 tumor samples
  cat("Taking first", min(tumor_limit, nrow(tumor_samples_all)), "tumor samples from", nrow(tumor_samples_all), "available\n")
  tumor_samples <- head(tumor_samples_all, tumor_limit)
  
  # Display sample information
  cat("Selected samples:", nrow(normal_samples), "normal,", nrow(tumor_samples), "tumor\n")
  selected_barcodes <- c(normal_samples$cases, tumor_samples$cases)
  
  # Create limited query and download data
  query_limited <- GDCquery(
    project = project_id,
    data.category = "Transcriptome Profiling",
    data.type = "Gene Expression Quantification",
    workflow.type = "STAR - Counts",
    barcode = selected_barcodes
  )
  
  # Download and prepare data
  GDCdownload(query_limited, directory = data_path)
  se_object <- GDCprepare(query_limited, directory = data_path)
  
  # Save data locally for future use
  saveRDS(se_object, local_file)
  return(se_object)
}
 # Download data for three cancer types
paad_data <- download_tcga_data("TCGA-PAAD", tumor_limit = 100)
coad_data <- download_tcga_data("TCGA-COAD", tumor_limit = 100)
luad_data <- download_tcga_data("TCGA-LUAD", tumor_limit = 100)

# Function to process sample metadata with additional quality checks
process_metadata <- function(se, project_id) {
  meta <- as.data.frame(colData(se))
  meta$sample_id <- rownames(meta)
  # Clean and categorize samples with validation
  processed_meta <- meta %>%
    mutate(
      condition = case_when(
        sample_type == "Primary Tumor" ~ "Tumor",
        sample_type == "Solid Tissue Normal" ~ "Normal",
        TRUE ~ NA_character_
      ),
      cancer_type = case_when(
        project_id == "TCGA-PAAD" ~ "Pancreatic",
        project_id == "TCGA-COAD" ~ "Colorectal", 
        project_id == "TCGA-LUAD" ~ "Lung",
        TRUE ~ "Unknown"
      )
    ) %>%
    filter(condition %in% c("Normal", "Tumor")) %>%
    mutate(condition = factor(condition, levels = c("Normal", "Tumor")))
  
  # Display sample distribution
  cat("\nSample distribution for", project_id, ":\n")
  table(processed_meta$condition)
  return(processed_meta)
}

# Process all cancer datasets
cancer_data <- list()
if (exists("paad_data")) {
  cancer_data$Pancreatic <- list(
    counts = assay(paad_data, "unstranded"), 
    metadata = process_metadata(paad_data, "TCGA-PAAD")
  )
}
if (exists("coad_data")) {
  cancer_data$Colorectal <- list(
    counts = assay(coad_data, "unstranded"), 
    metadata = process_metadata(coad_data, "TCGA-COAD")
  )
}
if (exists("luad_data")) {
  cancer_data$Lung <- list(
    counts = assay(luad_data, "unstranded"), 
    metadata = process_metadata(luad_data, "TCGA-LUAD")
  )
}

# Convert Ensembl IDs to gene symbols
suppressMessages({
  # Extract unique Ensembl IDs
  all_genes <- unique(str_remove(
    unlist(lapply(cancer_data, function(x) rownames(x$counts))), 
    "\\..*$"
  ))
  mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
  gene_symbols <- getBM(
    attributes = c("ensembl_gene_id", "hgnc_symbol"), 
    filters = "ensembl_gene_id", 
    values = all_genes, 
    mart = mart
  )
  cat("Retrieved symbols for", nrow(gene_symbols), "genes\n")
})

# Create analysis objects with pre-computed DESeq2 results
analyses <- map(cancer_data, function(data) {
  cancer_type <- unique(data$metadata$cancer_type)
  cat("Processing", cancer_type, "cancer data...\n")
  
  # Align counts and metadata (ensure matching samples)
  common <- intersect(colnames(data$counts), data$metadata$sample_id)
  counts <- data$counts[, common]
  metadata <- data$metadata[match(common, data$metadata$sample_id), ]
  cat("  Samples aligned:", length(common), "\n")
  
  # Create DESeq2 dataset
  dds <- DESeqDataSetFromMatrix(
    countData = counts, 
    colData = metadata, 
    design = ~condition
  )
  
  # Filter low-count genes (genes with fewer than 10 total counts across all samples)
  
  # This removes noise and improves statistical power
  keep <- rowSums(counts(dds)) >= 10
  dds <- dds[keep, ]
  cat("  Genes after filtering:", nrow(dds), "of", length(keep), "\n")
  
  # Set reference level for comparison (Normal as reference)
  dds$condition <- relevel(dds$condition, ref = "Normal")
  
  # Add gene symbols to row metadata
  ensembl_clean <- str_remove(rownames(dds), "\\..*$")
  symbols <- gene_symbols$hgnc_symbol[match(ensembl_clean, gene_symbols$ensembl_gene_id)]
  mcols(dds)$gene_symbol <- ifelse(is.na(symbols) | symbols == "", ensembl_clean, symbols)
  
  # Run DESeq2 differential expression analysis
  dds <- DESeq(dds)
  
  # Extract results (Tumor vs Normal comparison)
  results_obj <- results(dds, contrast = c("condition", "Tumor", "Normal"))
  
  # Display summary of results
  summary(results_obj, alpha = 0.05)
  return(list(dds = dds, metadata = metadata, results = results_obj))
})
```

```{r}
## PAAD Analysis
# Get PAAD data from pre-computed analyses
dds <- analyses$Pancreatic$dds
results_df <- analyses$Pancreatic$results

# Check data availability and display summary statistics
cat("  Total samples:", ncol(dds), "\n")
cat("  Normal samples:", sum(dds$condition == "Normal"), "\n")
cat("  Tumor samples:", sum(dds$condition == "Tumor"), "\n")
cat("  Total genes:", nrow(dds), "\n")

# Principal Component Analysis (PCA)
vsd <- vst(dds, blind = FALSE)  # Variance stabilizing transformation
pca_data <- plotPCA(vsd, intgroup = "condition", returnData = TRUE) |>
  as_tibble() |>
  mutate(
    sample_clean = str_remove(name, "\\.[A-Z]+$"),  # Clean sample names
    condition = factor(group)
  )

# Calculate variance explained by each PC
percent_var <- round(100 * attr(plotPCA(vsd, intgroup = "condition", returnData = TRUE), "percentVar"))
# Statistical assessment of separation between groups
pc1_test <- t.test(PC1 ~ condition, data = pca_data)
pc2_test <- t.test(PC2 ~ condition, data = pca_data)
cat("PCA Results:\n")
cat("  PC1 variance explained:", percent_var[1], "%\n")
cat("  PC2 variance explained:", percent_var[2], "%\n")
cat("  PC1 separation p-value:", format.pval(pc1_test$p.value), "\n")
cat("  PC2 separation p-value:", format.pval(pc2_test$p.value), "\n")

# Create PCA plot
pca_pancreatic <- pca_data |>
  ggplot(aes(x = PC1, y = PC2, color = condition)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(aes(group = condition), type = "confidence", level = 0.68, alpha = 0.3) +
  scale_color_manual(
    values = c("Normal" = "steelblue", "Tumor" = "firebrick"),
    name = "Condition"
  ) +
  theme_publication() +
  labs(
    title = "PCA - PAAD",
    x = paste0("PC1 (", percent_var[1], "%)"),
    y = paste0("PC2 (", percent_var[2], "%)")
  )
pca_pancreatic

# Prepare volcano plot data for differential expression visualization
volcano_data <- as.data.frame(results_df) |>
  as_tibble(rownames = "ensembl_id") |>
  mutate(gene_symbol = mcols(dds)$gene_symbol) |>
  filter(!is.na(padj), !is.na(log2FoldChange)) |>  # Remove genes with missing values
  mutate(
    neg_log10_padj = -log10(padj),
    is_gene_interest = gene_symbol %in% genes_of_interest,
    significance = case_when(
      is_gene_interest ~ "Genes of Interest",
      padj < 0.05 & log2FoldChange > 1 ~ "Upregulated",
      padj < 0.05 & log2FoldChange < -1 ~ "Downregulated",
      .default = "Not significant"
    )
  )
cat("Volcano plot data:", nrow(volcano_data), "genes\n")

# Volcano plot - All genes with highlighted phosphatases-related genes
volcano_all_pancreatic <- ggplot(volcano_data, aes(x = log2FoldChange, y = neg_log10_padj)) +
# Plot all genes apart from the genes of interest first (background)
  geom_point(
    data = filter(volcano_data, !is_gene_interest), 
    aes(color = significance), 
    alpha = 0.4, 
    size = 0.8
  ) +
# Highlight genes of interest
  geom_point(
    data = filter(volcano_data, is_gene_interest), 
    color = "orange", 
    size = 3, 
    alpha = 0.9
  ) +
  scale_color_manual(
    values = c("Upregulated" = "firebrick", "Downregulated" = "steelblue", "Not significant" = "grey"),
    name = "Regulation"
  ) +
  
  # Add significance thresholds
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", alpha = 0.7) +
  
  # Label genes of interest
  geom_text_repel(
    data = filter(volcano_data, is_gene_interest),
    aes(label = gene_symbol), 
    size = 3, 
    max.overlaps = 20,
    box.padding = 0.3
  ) +
  theme_publication() +
  labs(
    title = "Differential expression - PAAD",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  )
volcano_all_pancreatic

# Analysis on phosphatases-related genes
volcano_pp2a_data <- volcano_data |>
  filter(gene_symbol %in% genes_of_interest) |>
  mutate(
    significance_category = case_when(
      abs(log2FoldChange) > 1 & padj < 0.05 ~ "Significant",
      .default = "Not Significant"
    ),
    direction = case_when(
      log2FoldChange > 1 & padj < 0.05 ~ "Upregulated",
      log2FoldChange < -1 & padj < 0.05 ~ "Downregulated", 
      .default = "Not Significant"
    )
  )

# Phosphatases-related genes volcano plot
volcano_pp2a_pancreatic <- volcano_pp2a_data |>
  ggplot(aes(x = log2FoldChange, y = neg_log10_padj, color = direction)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(
    values = c(
      "Upregulated" = "firebrick",
      "Downregulated" = "steelblue", 
      "Not Significant" = "grey"
    ),
    name = "Status"
  ) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", alpha = 0.7) +
  geom_text_repel(aes(label = gene_symbol), size = 3.5, max.overlaps = 20) +
  theme_publication() +
  labs(
    title = "Phosphatases-related genes - PAAD",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  )
volcano_pp2a_pancreatic

# Violin plot for significantly changed genes
significant_genes <- volcano_pp2a_data %>%
  dplyr::filter(abs(log2FoldChange) > 1, padj < 0.05) %>%
  dplyr::arrange(log2FoldChange)
if (nrow(significant_genes) > 0) {
  print(significant_genes[, c("gene_symbol", "log2FoldChange", "padj", "direction")])
  
  # Get normalized counts
  normalized_counts <- counts(dds, normalized = TRUE)
  
  # Extract data for significant genes
  sig_gene_symbols <- significant_genes$gene_symbol
  gene_indices <- which(mcols(dds)$gene_symbol %in% sig_gene_symbols)
  
  # Create long format data for plotting
  violin_data <- normalized_counts[gene_indices, , drop = FALSE] %>%
    as.data.frame() %>%
    tibble::rownames_to_column("ensembl_id") %>%
    dplyr::mutate(gene_symbol = mcols(dds)$gene_symbol[gene_indices]) %>%
    tidyr::pivot_longer(
      cols = -c(ensembl_id, gene_symbol), 
      names_to = "sample_id", 
      values_to = "normalized_count"
    ) %>%
    dplyr::left_join(
      as.data.frame(colData(dds)) %>%
        tibble::rownames_to_column("sample_id") %>%
        dplyr::select(sample_id, condition),
      by = "sample_id"
    ) %>%
    dplyr::mutate(
      log2_count = log2(normalized_count + 1),
      condition = factor(condition, levels = c("Normal", "Tumor"))
    ) %>%
    dplyr::left_join(
      significant_genes %>% dplyr::select(gene_symbol, direction, log2FoldChange),
      by = "gene_symbol"
    ) %>%
    dplyr::mutate(gene_symbol = reorder(gene_symbol, log2FoldChange))
  
  # Create violin plot
  violin_plot <- violin_data %>%
    ggplot(aes(x = condition, y = log2_count, fill = condition)) +
    geom_violin(alpha = 0.7, trim = FALSE) +
    geom_boxplot(width = 0.1, alpha = 0.8, outlier.shape = NA) +
    geom_jitter(width = 0.2, alpha = 0.4, size = 0.8) +
    scale_fill_manual(
      values = c("Normal" = "steelblue", "Tumor" = "firebrick"),
      name = "Condition"
    ) +
    facet_wrap(~ gene_symbol, scales = "free_y", ncol = 3) +
    theme_publication() +
    theme(
      strip.text = element_text(face = "bold", size = 10),
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "top"
    ) +
    labs(
      title = "Significantly changed phosphatases-related genes",
      x = "Condition",
      y = "Expression (log2(count + 1))"
    )
  
violin_plot
} else {
  cat("No significantly changed phosphatases-related genes found.\n")
}
# store results for the csv
significant_genes_paad <- significant_genes %>%
  dplyr::mutate(
    percent_change = 100 * (2^log2FoldChange - 1),
    cancer = "PAAD"
  ) %>%
  dplyr::select(cancer, gene_symbol, log2FoldChange, padj, percent_change)
```

```{r}
## COAD Analysis
# Get COAD data from pre-computed analyses
dds <- analyses$Colorectal$dds
results_df <- analyses$Colorectal$results
# Check data availability and display summary statistics
cat("  Total samples:", ncol(dds), "\n")
cat("  Normal samples:", sum(dds$condition == "Normal"), "\n")
cat("  Tumor samples:", sum(dds$condition == "Tumor"), "\n")
cat("  Total genes:", nrow(dds), "\n")

# Principal Component Analysis (PCA)
vsd <- vst(dds, blind = FALSE)  # Variance stabilizing transformation
pca_data <- plotPCA(vsd, intgroup = "condition", returnData = TRUE) |>
  as_tibble() |>
  mutate(
    sample_clean = str_remove(name, "\\.[A-Z]+$"),  # Clean sample names
    condition = factor(group)
  )

# Calculate variance explained by each PC
percent_var <- round(100 * attr(plotPCA(vsd, intgroup = "condition", returnData = TRUE), "percentVar"))

# Statistical assessment of separation between groups
pc1_test <- t.test(PC1 ~ condition, data = pca_data)
pc2_test <- t.test(PC2 ~ condition, data = pca_data)
cat("PCA Results:\n")
cat("  PC1 variance explained:", percent_var[1], "%\n")
cat("  PC2 variance explained:", percent_var[2], "%\n")
cat("  PC1 separation p-value:", format.pval(pc1_test$p.value), "\n")
cat("  PC2 separation p-value:", format.pval(pc2_test$p.value), "\n")

# Create PCA plot 
pca_colorectal <- pca_data |>
  ggplot(aes(x = PC1, y = PC2, color = condition)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(aes(group = condition), type = "confidence", level = 0.68, alpha = 0.3) +
  scale_color_manual(
    values = c("Normal" = "steelblue", "Tumor" = "firebrick"),
    name = "Condition"
  ) +
  theme_publication() +
  labs(
    title = "PCA - COAD",
    x = paste0("PC1 (", percent_var[1], "%)"),
    y = paste0("PC2 (", percent_var[2], "%)")
  )
pca_colorectal

# Prepare volcano plot data for differential expression visualization
volcano_data <- as.data.frame(results_df) |>
  as_tibble(rownames = "ensembl_id") |>
  mutate(gene_symbol = mcols(dds)$gene_symbol) |>
  filter(!is.na(padj), !is.na(log2FoldChange)) |>  # Remove genes with missing values
  mutate(
    neg_log10_padj = -log10(padj),
    is_gene_interest = gene_symbol %in% genes_of_interest,
    significance = case_when(
      is_gene_interest ~ "Genes of Interest",
      padj < 0.05 & log2FoldChange > 1 ~ "Upregulated",
      padj < 0.05 & log2FoldChange < -1 ~ "Downregulated",
      .default = "Not significant"
    )
  )
cat("Volcano plot data:", nrow(volcano_data), "genes\n")

# Volcano plot - All genes with highlighted phosphatases-related genes
volcano_all_colorectal <- ggplot(volcano_data, aes(x = log2FoldChange, y = neg_log10_padj)) +
# Plot all genes apart from the genes of interest first (background)
  geom_point(
    data = filter(volcano_data, !is_gene_interest), 
    aes(color = significance), 
    alpha = 0.4, 
    size = 0.8
  ) +
# Highlight genes of interest
  geom_point(
    data = filter(volcano_data, is_gene_interest), 
    color = "orange", 
    size = 3, 
    alpha = 0.9
  ) +
  scale_color_manual(
    values = c("Upregulated" = "firebrick", "Downregulated" = "steelblue", "Not significant" = "grey"),
    name = "Regulation"
  ) +
# Add significance thresholds
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", alpha = 0.7) +
  # Label genes of interest
  geom_text_repel(
    data = filter(volcano_data, is_gene_interest),
    aes(label = gene_symbol), 
    size = 3, 
    max.overlaps = 20,
    box.padding = 0.3
  ) +
  theme_publication() +
  labs(
    title = "Differential expression - COAD",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  )
volcano_all_colorectal

# Analysis of phosphatases-related genes
volcano_pp2a_data <- volcano_data |>
  filter(gene_symbol %in% genes_of_interest) |>
  mutate(
    significance_category = case_when(
      abs(log2FoldChange) > 1 & padj < 0.05 ~ "Significant",
      .default = "Not Significant"
    ),
    direction = case_when(
      log2FoldChange > 1 & padj < 0.05 ~ "Upregulated",
      log2FoldChange < -1 & padj < 0.05 ~ "Downregulated", 
      .default = "Not Significant"
    )
  )

# Phosphatases-related genes volcano plot
volcano_pp2a_colorectal <- volcano_pp2a_data |>
  ggplot(aes(x = log2FoldChange, y = neg_log10_padj, color = direction)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(
    values = c(
      "Upregulated" = "firebrick",
      "Downregulated" = "steelblue", 
      "Not Significant" = "grey"
    ),
    name = "Status"
  ) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", alpha = 0.7) +
  geom_text_repel(aes(label = gene_symbol), size = 3.5, max.overlaps = 20) +
  theme_publication() +
  labs(
    title = "Phosphatases-related genes - COAD",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  )
volcano_pp2a_colorectal

# Violin plot for significantly changed genes 
significant_genes <- volcano_pp2a_data %>%
  dplyr::filter(abs(log2FoldChange) > 1, padj < 0.05) %>%
  dplyr::arrange(log2FoldChange)

if (nrow(significant_genes) > 0) {
  print(significant_genes[, c("gene_symbol", "log2FoldChange", "padj", "direction")])
  
# Get normalized counts
  normalized_counts <- counts(dds, normalized = TRUE)
  
# Extract data for significant genes
  sig_gene_symbols <- significant_genes$gene_symbol
  gene_indices <- which(mcols(dds)$gene_symbol %in% sig_gene_symbols)
  
# Create long format data for plotting
  violin_data <- normalized_counts[gene_indices, , drop = FALSE] %>%
    as.data.frame() %>%
    tibble::rownames_to_column("ensembl_id") %>%
    dplyr::mutate(gene_symbol = mcols(dds)$gene_symbol[gene_indices]) %>%
    tidyr::pivot_longer(
      cols = -c(ensembl_id, gene_symbol), 
      names_to = "sample_name", 
      values_to = "normalized_count"
    ) %>%
    dplyr::left_join(
      as.data.frame(colData(dds)) %>%
        tibble::rownames_to_column("sample_name") %>%
        dplyr::select(sample_name, condition),
      by = "sample_name"
    ) %>%
    dplyr::mutate(
      log2_count = log2(normalized_count + 1),
      condition = factor(condition, levels = c("Normal", "Tumor"))
    ) %>%
    dplyr::left_join(
      significant_genes %>% dplyr::select(gene_symbol, direction, log2FoldChange),
      by = "gene_symbol"
    ) %>%
    dplyr::mutate(gene_symbol = reorder(gene_symbol, log2FoldChange))
  
# Create violin plot
  violin_colorectal <- violin_data %>%
    ggplot(aes(x = condition, y = log2_count, fill = condition)) +
    geom_violin(alpha = 0.7, trim = FALSE) +
    geom_boxplot(width = 0.1, alpha = 0.8, outlier.shape = NA) +
    geom_jitter(width = 0.2, alpha = 0.4, size = 0.8) +
    scale_fill_manual(
      values = c("Normal" = "steelblue", "Tumor" = "firebrick"),
      name = "Condition"
    ) +
    facet_wrap(~ gene_symbol, scales = "free_y", ncol = 3) +
    theme_publication() +
    theme(
      strip.text = element_text(face = "bold", size = 10),
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "top"
    ) +
    labs(
      title = "Significantly changed phosphatases-related genes - COAD",
      x = "Condition",
      y = "Expression (log2(count + 1))"
    )
violin_colorectal
} else {
  cat("No significantly changed phosphatases-related genes found in COAD\n")
}
# store results for the csv
significant_genes_coad <- significant_genes %>%
  dplyr::mutate(
    percent_change = 100 * (2^log2FoldChange - 1),
    cancer = "COAD"
  ) %>%
  dplyr::select(cancer, gene_symbol, log2FoldChange, padj, percent_change)
```

```{r}
## LUAD Analysis
# Get LUAD data from pre-computed analyses
dds <- analyses$Lung$dds
results_df <- analyses$Lung$results

# Check data availability and display summary statistics
cat("  Total samples:", ncol(dds), "\n")
cat("  Normal samples:", sum(dds$condition == "Normal"), "\n")
cat("  Tumor samples:", sum(dds$condition == "Tumor"), "\n")
cat("  Total genes:", nrow(dds), "\n")

# Principal Component Analysis (PCA)
vsd <- vst(dds, blind = FALSE)  # Variance stabilizing transformation
pca_data <- plotPCA(vsd, intgroup = "condition", returnData = TRUE) |>
  as_tibble() |>
  mutate(
    sample_clean = str_remove(name, "\\.[A-Z]+$"),  # Clean sample names
    condition = factor(group)
  )

# Calculate variance explained by each PC
percent_var <- round(100 * attr(plotPCA(vsd, intgroup = "condition", returnData = TRUE), "percentVar"))

# Statistical assessment of separation between groups
pc1_test <- t.test(PC1 ~ condition, data = pca_data)
pc2_test <- t.test(PC2 ~ condition, data = pca_data)
cat("PCA Results:\n")
cat("  PC1 variance explained:", percent_var[1], "%\n")
cat("  PC2 variance explained:", percent_var[2], "%\n")
cat("  PC1 separation p-value:", format.pval(pc1_test$p.value), "\n")
cat("  PC2 separation p-value:", format.pval(pc2_test$p.value), "\n")

# Create PCA plot
pca_lung <- pca_data |>
  ggplot(aes(x = PC1, y = PC2, color = condition)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(aes(group = condition), type = "confidence", level = 0.68, alpha = 0.3) +
  scale_color_manual(
    values = c("Normal" = "steelblue", "Tumor" = "firebrick"),
    name = "Condition"
  ) +
  theme_publication() +
  labs(
    title = "PCA - LUAD",
    x = paste0("PC1 (", percent_var[1], "%)"),
    y = paste0("PC2 (", percent_var[2], "%)")
  )
pca_lung

# Prepare volcano plot data for differential expression visualization
volcano_data <- as.data.frame(results_df) |>
  as_tibble(rownames = "ensembl_id") |>
  mutate(gene_symbol = mcols(dds)$gene_symbol) |>
  filter(!is.na(padj), !is.na(log2FoldChange)) |>  # Remove genes with missing values
  mutate(
    neg_log10_padj = -log10(padj),
    is_gene_interest = gene_symbol %in% genes_of_interest,
    significance = case_when(
      is_gene_interest ~ "Genes of Interest",
      padj < 0.05 & log2FoldChange > 1 ~ "Upregulated",
      padj < 0.05 & log2FoldChange < -1 ~ "Downregulated",
      .default = "Not significant"
    )
  )
cat("Volcano plot data:", nrow(volcano_data), "genes\n")

# Volcano plot - All genes with highlighted phosphatases-related genes
volcano_all_lung <- ggplot(volcano_data, aes(x = log2FoldChange, y = neg_log10_padj)) +
  # Plot all genes apart from the genes of interest first (background)
  geom_point(
    data = filter(volcano_data, !is_gene_interest), 
    aes(color = significance), 
    alpha = 0.4, 
    size = 0.8
  ) +
  # Highlight genes of interest
  geom_point(
    data = filter(volcano_data, is_gene_interest), 
    color = "orange", 
    size = 3, 
    alpha = 0.9
  ) +
  scale_color_manual(
    values = c("Upregulated" = "firebrick", "Downregulated" = "steelblue", "Not significant" = "grey"),
    name = "Regulation"
  ) +
  # Add significance thresholds
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", alpha = 0.7) +
  # Label genes of interest
  geom_text_repel(
    data = filter(volcano_data, is_gene_interest),
    aes(label = gene_symbol), 
    size = 3, 
    max.overlaps = 20,
    box.padding = 0.3
  ) +
  theme_publication() +
  labs(
    title = "Differential expression - LUAD",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  )
volcano_all_lung
# Focused analysis on phosphatases-related genes
volcano_pp2a_data <- volcano_data |>
  filter(gene_symbol %in% genes_of_interest) |>
  mutate(
    significance_category = case_when(
      abs(log2FoldChange) > 1 & padj < 0.05 ~ "Significant",
      .default = "Not Significant"
    ),
    direction = case_when(
      log2FoldChange > 1 & padj < 0.05 ~ "Upregulated",
      log2FoldChange < -1 & padj < 0.05 ~ "Downregulated", 
      .default = "Not Significant"
    )
  )

# Phosphatases-related genes volcano plot
volcano_pp2a_lung <- volcano_pp2a_data |>
  ggplot(aes(x = log2FoldChange, y = neg_log10_padj, color = direction)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(
    values = c(
      "Upregulated" = "firebrick",
      "Downregulated" = "steelblue", 
      "Not Significant" = "grey"
    ),
    name = "Status"
  ) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", alpha = 0.7) +
  geom_text_repel(aes(label = gene_symbol), size = 3.5, max.overlaps = 20) +
  theme_publication() +
  labs(
    title = "Phosphatases-related genes - LUAD",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  )
volcano_pp2a_lung
# Violin plot for significantly changed genes - LUAD
significant_genes <- volcano_pp2a_data %>%
  dplyr::filter(abs(log2FoldChange) > 1, padj < 0.05) %>%
  dplyr::arrange(log2FoldChange)

if (nrow(significant_genes) > 0) {
  print(significant_genes[, c("gene_symbol", "log2FoldChange", "padj", "direction")])
  
  # Get normalized counts
  normalized_counts <- counts(dds, normalized = TRUE)
  
  # Extract data for significant genes
  sig_gene_symbols <- significant_genes$gene_symbol
  gene_indices <- which(mcols(dds)$gene_symbol %in% sig_gene_symbols)
  
  # Create long format data for plotting
  violin_data <- normalized_counts[gene_indices, , drop = FALSE] %>%
    as.data.frame() %>%
    tibble::rownames_to_column("ensembl_id") %>%
    dplyr::mutate(gene_symbol = mcols(dds)$gene_symbol[gene_indices]) %>%
    tidyr::pivot_longer(
      cols = -c(ensembl_id, gene_symbol), 
      names_to = "sample_name", 
      values_to = "normalized_count"
    ) %>%
    dplyr::left_join(
      as.data.frame(colData(dds)) %>%
        tibble::rownames_to_column("sample_name") %>%
        dplyr::select(sample_name, condition),
      by = "sample_name"
    ) %>%
    dplyr::mutate(
      log2_count = log2(normalized_count + 1),
      condition = factor(condition, levels = c("Normal", "Tumor"))
    ) %>%
    dplyr::left_join(
      significant_genes %>%
        dplyr::select(gene_symbol, direction, log2FoldChange),
      by = "gene_symbol"
    ) %>%
    dplyr::mutate(gene_symbol = reorder(gene_symbol, log2FoldChange))
  
  # Create violin plot
  violin_lung <- violin_data %>%
    ggplot(aes(x = condition, y = log2_count, fill = condition)) +
    geom_violin(alpha = 0.7, trim = FALSE) +
    geom_boxplot(width = 0.1, alpha = 0.8, outlier.shape = NA) +
    geom_jitter(width = 0.2, alpha = 0.4, size = 0.8) +
    scale_fill_manual(
      values = c("Normal" = "steelblue", "Tumor" = "firebrick"),
      name = "Condition"
    ) +
    facet_wrap(~ gene_symbol, scales = "free_y", ncol = 3) +
    theme_publication() +
    theme(
      strip.text = element_text(face = "bold", size = 10),
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "top"
    ) +
    labs(
      title = "Significantly changed phosphatases-related genes - LUAD",
      x = "Condition",
      y = "Expression (log2(count + 1))"
    )
  
  print(violin_lung)
} else {
  cat("No significantly changed phosphatases-related genes found in LUAD\n")
}
# store results for the csv
significant_genes_luad <- significant_genes %>%
  dplyr::mutate(
    percent_change = 100 * (2^log2FoldChange - 1),
    cancer = "LUAD"
  ) %>%
  dplyr::select(cancer, gene_symbol, log2FoldChange, padj, percent_change)
```

```{r}
# Combine all significant genes into one data frame
significant_genes_all <- dplyr::bind_rows(
  significant_genes_paad,
  significant_genes_coad,
  significant_genes_luad
)

# Save as CSV
readr::write_csv(significant_genes_all, "significant_genes_bulk.csv")
```
