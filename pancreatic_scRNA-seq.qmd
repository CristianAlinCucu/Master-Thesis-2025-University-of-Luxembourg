---
title: "Pancreatic scRNA-seq analysis of phosphatase-related genes"
author: "Cristian Alin Cucu"
format:
  html:
    self-contained: true
    toc: true
    number-sections: true
    code-fold: show
    code-tools: true
    fig-width: 12
    fig-height: 8
editor: visual
execute:
  warning: false
  message: false
  cache: false
---

```{r}
# This analysis was developed with assistance from Claude-Sonnet 4.0 (Anthropic) AI tool for plot visual optimization and code debugging. Main workflow, data interpretation and methodology were done by the author.
## CONFIGURATION
# CRAN packages needed for data science, plotting, and markdown output
required_cran <- c(
  "dplyr", "tibble", "tidyr", "stringr", "purrr", "here",
  "ggplot2", "ggrepel", "ggpubr", "patchwork", "pheatmap", 
  "RColorBrewer", "knitr", "kableExtra", "readr", "cowplot",
  "viridis", "magrittr", "data.table", "R.utils", "Matrix", "patchwork", "hdf5r", "future"
)

# Bioconductor packages for scRNA-seq and differential expression analysis
required_bioc <- c("Seurat", "edgeR", "limma", "DESeq2")

# Package for batch effect reduction
required_special <- c("harmony")

# Install missing packages
suppressWarnings({ 
install_if_missing <- function(pkgs, type) {
  missing <- pkgs[!pkgs %in% rownames(installed.packages())]
  if (length(missing) == 0) return(invisible())
  
  if (type == "cran") {
    install.packages(missing, dependencies = TRUE)
  } else if (type == "bioc") {
    if (!requireNamespace("BiocManager", quietly = TRUE)) {
      install.packages("BiocManager")
    }
    BiocManager::install(missing, dependencies = TRUE, ask = FALSE)
  } else if (type == "special") {
    for (pkg in missing) {
      if (pkg == "harmony") {
        if (!requireNamespace("devtools", quietly = TRUE)) {
          install.packages("devtools")
        }
        devtools::install_github("immunogenomics/harmony")
      }
    }
  }
}

# Install missing packages
install_if_missing(required_cran, "cran")
install_if_missing(required_bioc, "bioc")
install_if_missing(required_special, "special")

# Load all required libraries for the analysis
suppressPackageStartupMessages({
  library(Seurat)
  library(dplyr)
  library(tibble)
  library(tidyr)
  library(stringr)
  library(purrr)
  library(here)
  library(ggplot2)
  library(ggrepel)
  library(ggpubr)
  library(patchwork)
  library(pheatmap)
  library(RColorBrewer)
  library(knitr)
  library(kableExtra)
  library(readr)
  library(cowplot)
  library(viridis)
  library(magrittr)
  library(data.table)
  library(harmony)
  library(R.utils)
  library(Matrix)
  library(edgeR)
  library(limma)
  library(DESeq2)
  library(patchwork)
  library(hdf5r)
  library(future)
})

# Set up the working directory
data_path <- here("GSE212966_data")
results_path <- here("scRNA-seq_results")
dir.create(data_path, recursive = TRUE, showWarnings = FALSE)
dir.create(results_path, recursive = TRUE, showWarnings = FALSE)

# Theme_publication of the figures
theme_publication <- function(base_size = 12) {
  theme_minimal(base_size = base_size) +
    theme(
      plot.title = element_text(size = base_size + 2, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = base_size, hjust = 0.5, color = "grey50"),
      axis.title = element_text(size = base_size),
      legend.position = "top", legend.title = element_text(face = "bold"),
      strip.text = element_text(face = "bold"),
      panel.grid.minor = element_blank(),
      panel.border = element_rect(color = "grey80", fill = NA, linewidth = 0.5)
    )
}
})
# Define genes of interest (phosphatases-related genes)
genes_of_interest <- c(
  "PPP2CA", "PPP2CB",                   # Catalytic subunits
  "PPP2R5A", "PPP2R2D", "STRN",         # PP2A regulatory subunits
  "CIP2A", "SET",  "ANP32A", "ANP32B",  # PP2A-B56 inhibitors
  "MASTL", "ENSA", "ARPP19",            # PP2A-B55 inhibitors
  "LCMT1", "PPME1",                     # PP2A methyltransferase
  "PPP1CA", "PPP1CB" ,                  # PP1 catalytic subunits
  "MRAS", "SHOC2",                      # PP1 interactors
  "SPRED1", "NF1"                       # MAPK regulators
)



```

```{r}
## DOWNLOAD THE DATASETS AND LOADING
# Sample information from GSE212966: 6 PDAC, 6 ADJ
original_samples <- data.frame(
  sample_id = c("PDAC1", "PDAC2", "PDAC3", "PDAC4", "PDAC5", "PDAC6", 
                "ADJ1", "ADJ2", "ADJ3", "ADJ4", "ADJ5", "ADJ6"),
  sample_type = c(rep("Tumor", 6), rep("Normal", 6)),
  accession = c("GSM6567157", "GSM6567159", "GSM6567160", "GSM6567161", "GSM6567163", "GSM6567164",
                "GSM6567165", "GSM6567166", "GSM6567167", "GSM6567169", "GSM6567170", "GSM6567171"),
  dataset = rep("GSE212966", 12)
)

# Samples from GSE155698: 16 PDAC, PDAC11 is in two technical replicate, 3 ADJ
tumor_samples_gse155698 <- data.frame(
  sample_id = c("PDAC7", "PDAC8", "PDAC9", "PDAC10", "PDAC11", 
                "PDAC12", "PDAC13", "PDAC14", "PDAC15", "PDAC16",
                "PDAC17A", "PDAC17B", "PDAC18", "PDAC19", 
                "PDAC20", "PDAC21", "PDAC22"),
  sample_type = rep("Tumor", 17),
  accession = c("GSM4710689", "GSM4710690", "GSM4710691", "GSM4710692", "GSM4710693", 
                "GSM4710694", "GSM4710695", "GSM4710696", "GSM4710697", "GSM4710698",
                "GSM4710699", "GSM4710700", "GSM4710701", "GSM4710702", 
                "GSM4710703", "GSM4710704", "GSM4710705"),
  original_name = c("PDAC_TISSUE_1", "PDAC_TISSUE_2", "PDAC_TISSUE_3", "PDAC_TISSUE_4", "PDAC_TISSUE_5",
                    "PDAC_TISSUE_6", "PDAC_TISSUE_7", "PDAC_TISSUE_8", "PDAC_TISSUE_9", "PDAC_TISSUE_10",
                    "PDAC_TISSUE_11A", "PDAC_TISSUE_11B", "PDAC_TISSUE_12", "PDAC_TISSUE_13", 
                    "PDAC_TISSUE_14", "PDAC_TISSUE_15", "PDAC_TISSUE_16"),  
  dataset = rep("GSE155698", 17)
)

normal_samples_gse155698 <- data.frame(
  sample_id = c("ADJ7", "ADJ8", "ADJ9"),
  sample_type = rep("Normal", 3),
  accession = c("GSM4710706", "GSM4710707", "GSM4710708"),
  original_name = c("AdjNorm_TISSUE_1", "AdjNorm_TISSUE_2", "AdjNorm_TISSUE_3"),
  dataset = rep("GSE155698", 3)
)

# Combine all samples
sample_info <- rbind(
  original_samples[, c("sample_id", "sample_type", "accession", "dataset")],
  tumor_samples_gse155698[, c("sample_id", "sample_type", "accession", "dataset")],
  normal_samples_gse155698[, c("sample_id", "sample_type", "accession", "dataset")]
)

sample_info$original_name <- NA
sample_info$original_name[sample_info$dataset == "GSE155698"] <- 
  c(tumor_samples_gse155698$original_name, normal_samples_gse155698$original_name)

# Enhanced function to check if samples are complete
is_sample_complete <- function(sample_dir, dataset) {
  if (!dir.exists(sample_dir)) return(FALSE)
  
  if (dataset == "GSE202051") {
    files <- list.files(sample_dir, pattern = "\\.(mtx|tsv)\\.gz$")
    return(length(files) >= 3)
  } else if (dataset == "GSE155698") {
    h5_files <- list.files(sample_dir, recursive = TRUE, pattern = "\\.h5$")
    data_files <- list.files(sample_dir, recursive = TRUE, pattern = "\\.(mtx|tsv)$")
    return(length(h5_files) > 0 || length(data_files) >= 3)
  }
  return(FALSE)
}

# Extract function remains the same
extract_tar_safe <- function(tar_file, extract_dir) {
  tryCatch({
    result <- untar(tar_file, exdir = extract_dir)
    if (result == 0) return(TRUE)
    result <- utils::untar(tar_file, exdir = extract_dir, tar = "internal")
    return(result == 0)
  }, error = function(e) {
    cat("Extraction failed for", basename(tar_file), "\n")
    return(FALSE)
  })
}

# Download sample for h5 file
download_sample_enhanced <- function(sample_id, accession, dataset, data_path, original_name = NULL) {
  sample_dir <- file.path(data_path, sample_id)
  dir.create(sample_dir, recursive = TRUE, showWarnings = FALSE)
  
  if (is_sample_complete(sample_dir, dataset)) {
    return(invisible())
  }
  
  if (dataset == "GSE202051") {
    file_types <- c("matrix.mtx.gz", "genes.tsv.gz", "barcodes.tsv.gz")
    for (file_type in file_types) {
      file_name <- paste0(accession, "_", sample_id, "_", file_type)
      local_file <- file.path(sample_dir, file_name)
      
      if (file.exists(local_file) && file.size(local_file) > 1000) next
      
      base_url <- "https://ftp.ncbi.nlm.nih.gov/geo/samples"
      accession_dir <- paste0(substr(accession, 1, 7), "nnn", "/", accession, "/suppl")
      file_url <- paste0(base_url, "/", accession_dir, "/", file_name)
      
      tryCatch({
        download.file(file_url, local_file, mode = "wb", timeout = 300, quiet = TRUE)
      }, error = function(e) invisible())
    }
  } else if (dataset == "GSE155698") {
    # Check for existing H5 or data files
    h5_files <- list.files(sample_dir, recursive = TRUE, pattern = "\\.h5$")
    data_files <- list.files(sample_dir, recursive = TRUE, pattern = "\\.(mtx|tsv)$")
    
    if (length(h5_files) > 0 || length(data_files) >= 3) return(invisible())
    
    # Try to download tar.gz file
    file_name <- paste0(accession, "_", original_name, ".tar.gz")
    local_file <- file.path(sample_dir, file_name)
    
    # Also try H5 file directly for samples that have it
    h5_file_name <- paste0(accession, "_", original_name, ".h5")
    local_h5_file <- file.path(sample_dir, h5_file_name)
    
    # Check if tar file exists and extract
    if (file.exists(local_file) && file.size(local_file) > 1000) {
      if (extract_tar_safe(local_file, sample_dir)) {
        return(invisible())
      }
    }
    
    # Try downloading tar.gz first
    base_url <- "https://ftp.ncbi.nlm.nih.gov/geo/samples"
    accession_dir <- paste0(substr(accession, 1, 7), "nnn", "/", accession, "/suppl")
    file_url <- paste0(base_url, "/", accession_dir, "/", file_name)
    
    tryCatch({
      download.file(file_url, local_file, mode = "wb", timeout = 900, quiet = TRUE)
      if (file.exists(local_file) && file.size(local_file) > 1000) {
        extract_tar_safe(local_file, sample_dir)
      }
    }, error = function(e) {
      # If tar.gz fails, try H5 file directly
      h5_url <- paste0(base_url, "/", accession_dir, "/", h5_file_name)
      tryCatch({
        download.file(h5_url, local_h5_file, mode = "wb", timeout = 900, quiet = TRUE)
      }, error = function(e) invisible())
    })
  }
}

# Enhanced loading function with improved H5 support
load_sample_enhanced <- function(sample_id, sample_type, accession, dataset, data_path) {
  sample_dir <- file.path(data_path, sample_id)
  
  if (!dir.exists(sample_dir)) return(NULL)
  
  all_files <- list.files(sample_dir, recursive = TRUE, full.names = TRUE)
  if (length(all_files) == 0) return(NULL)
  
  tryCatch({
    # Try H5 files first (more efficient)
    h5_files <- all_files[grepl(".*\\.h5$", all_files, ignore.case = TRUE)]
    
    counts <- NULL
    
    if (length(h5_files) > 0) {
      cat(" [H5]")
      # Try filtered first, then any H5 file
      filtered_h5 <- h5_files[grepl("filtered", h5_files, ignore.case = TRUE)]
      h5_file <- if(length(filtered_h5) > 0) filtered_h5[1] else h5_files[1]
      
      counts <- Read10X_h5(h5_file, use.names = TRUE, unique.features = TRUE)
    } else {
      # Fall back to MTX format
      matrix_files <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files, ignore.case = TRUE)]
      genes_files <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
      barcodes_files <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
      
      if (length(matrix_files) > 0 && length(genes_files) > 0 && length(barcodes_files) > 0) {
        cat(" [MTX]")
        matrix_file <- matrix_files[1]
        genes_file <- genes_files[1]
        barcodes_file <- barcodes_files[1]
        
        temp_dir <- tempfile()
        dir.create(temp_dir)
        
        # Handle compressed files
        if (grepl("\\.gz$", matrix_file)) {
          file.copy(matrix_file, file.path(temp_dir, "matrix.mtx.gz"))
        } else {
          file.copy(matrix_file, file.path(temp_dir, "matrix.mtx"))
          R.utils::gzip(file.path(temp_dir, "matrix.mtx"))
        }
        
        if (grepl("\\.gz$", genes_file)) {
          file.copy(genes_file, file.path(temp_dir, "features.tsv.gz"))
        } else {
          file.copy(genes_file, file.path(temp_dir, "features.tsv"))
          R.utils::gzip(file.path(temp_dir, "features.tsv"))
        }
        
        if (grepl("\\.gz$", barcodes_file)) {
          file.copy(barcodes_file, file.path(temp_dir, "barcodes.tsv.gz"))
        } else {
          file.copy(barcodes_file, file.path(temp_dir, "barcodes.tsv"))
          R.utils::gzip(file.path(temp_dir, "barcodes.tsv"))
        }
        
        counts <- Read10X(temp_dir)
        unlink(temp_dir, recursive = TRUE)
      } else {
        return(NULL)
      }
    }
    
    # Handle multi-modal data 
    if (is.list(counts)) {
      if ("Gene Expression" %in% names(counts)) {
        counts <- counts[["Gene Expression"]]
      } else {
        counts <- counts[[1]]
      }
    }
    
    # Validate counts matrix
    if (is.null(counts) || ncol(counts) == 0 || nrow(counts) == 0) {
      return(NULL)
    }
    
    # Clean gene names (replace underscores with hyphens for consistency)
    rownames(counts) <- gsub("_", "-", rownames(counts))
    
    # Create Seurat object
    seurat_obj <- CreateSeuratObject(
      counts = counts, 
      project = sample_id,
      min.cells = 3, 
      min.features = 200
    )
    
    # Add sample-specific prefixes to cell names
    seurat_obj <- RenameCells(seurat_obj, new.names = paste0(sample_id, "_", colnames(seurat_obj)))
    
    # Add metadata
    seurat_obj$sample_id <- sample_id
    seurat_obj$sample_type <- sample_type
    seurat_obj$accession <- accession
    seurat_obj$dataset <- dataset
    seurat_obj$orig.ident <- sample_id
    
    return(seurat_obj)
    
  }, error = function(e) {
    cat("Error loading", sample_id, ":", e$message, "\n")
    return(NULL)
  })
}

# Create pancreas object with all samples including PDAC20
cat("Starting data download and loading...\n")

seurat_objects <- list()
failed_samples <- c()

for (i in 1:nrow(sample_info)) {
  sample_id <- sample_info$sample_id[i]
  sample_type <- sample_info$sample_type[i] 
  accession <- sample_info$accession[i]
  dataset <- sample_info$dataset[i]
  original_name <- sample_info$original_name[i]
  
  cat("Processing", sample_id, "(", accession, ")...")
  
  # Download sample data
  if (!is.na(original_name)) {
    download_sample_enhanced(sample_id, accession, dataset, data_path, original_name)
  } else {
    download_sample_enhanced(sample_id, accession, dataset, data_path)
  }
  
  # Load sample data
  seurat_obj <- load_sample_enhanced(sample_id, sample_type, accession, dataset, data_path)
  
  if (!is.null(seurat_obj)) {
    seurat_objects[[sample_id]] <- seurat_obj
    cat("good\n")
  } else {
    failed_samples <- c(failed_samples, sample_id)
    cat("failed\n")
  }
}

# Report loading results
cat("Successfully loaded:", length(seurat_objects), "samples\n")
cat("Failed samples:", length(failed_samples), "\n")
if (length(failed_samples) > 0) {
  cat("Failed sample IDs:", paste(failed_samples, collapse = ", "), "\n")
}

# Merge all successful samples
if (length(seurat_objects) > 0) {
  pancreas <- seurat_objects[[1]]
  
  if (length(seurat_objects) > 1) {
    pancreas <- merge(pancreas, y = seurat_objects[2:length(seurat_objects)], 
                     add.cell.ids = names(seurat_objects), project = "pancreas")
  }
  
  cat("\nFinal merged object:\n")
  cat("Total cells:", ncol(pancreas), "\n")
  cat("Total genes:", nrow(pancreas), "\n")
  cat("Samples included:", paste(unique(pancreas$sample_id), collapse = ", "), "\n")
  
  # Clean up
  rm(seurat_objects)
  
} else {
  stop("No samples were successfully loaded!")
}

```

```{r}
## QUALITY CONTROL
# Save unfiltered copy
pancreas_unfiltered <- pancreas

# Calculate QC metrics
pancreas_unfiltered[["percent.mt"]] <- PercentageFeatureSet(pancreas_unfiltered, pattern = "^MT-")
pancreas_unfiltered[["percent.HB"]] <- PercentageFeatureSet(pancreas_unfiltered, pattern = "^HB[AB]")

# QC plots before filtering
qc_before_df <- pancreas_unfiltered@meta.data[, c("nFeature_RNA", "nCount_RNA", "percent.mt")]
qc_before_long <- pivot_longer(as.data.frame(qc_before_df), cols = everything(), names_to = "variable", values_to = "value")

before_plot <- ggplot(qc_before_long, aes(x = variable, y = value)) +
  geom_violin(trim = FALSE, fill = "red", color = "black", alpha = 0.7) +
  facet_wrap(~ variable, scales = "free_y", nrow = 1) +
  labs(title = "QC - before filtering") +
  theme_minimal() +
  theme(
    axis.text.x = element_blank(),                      
    axis.ticks.x = element_blank(),                     
    axis.title = element_text(size = 16, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_text(size = 18, face = "bold")
  )
before_plot

# Apply filtering
pancreas[["percent.mt"]] <- PercentageFeatureSet(pancreas, pattern = "^MT-")
pancreas[["percent.HB"]] <- PercentageFeatureSet(pancreas, pattern = "^HB[AB]")

# Filter cells and genes
pancreas <- subset(pancreas, subset = 
  nFeature_RNA > 500 & nFeature_RNA < 7000 & 
  nCount_RNA < 50000 & 
  percent.mt < 15 &
  percent.HB < 1  
)

# QC plots after filtering
qc_after_df <- pancreas@meta.data[, c("nFeature_RNA", "nCount_RNA", "percent.mt")]
qc_after_long <- pivot_longer(as.data.frame(qc_after_df), cols = everything(), names_to = "variable", values_to = "value")

after_plot <- ggplot(qc_after_long, aes(x = variable, y = value)) +
  geom_violin(trim = FALSE, fill = "green", color = "black", alpha = 0.7) +
  facet_wrap(~ variable, scales = "free_y", nrow = 1) +
  labs(title = "QC - after filtering") +
  theme_minimal() +
  theme(
    axis.text.x = element_blank(),                      
    axis.ticks.x = element_blank(),                     
    axis.title = element_text(size = 16, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_text(size = 18, face = "bold")
  )
after_plot
# Clean the unfiltered one
rm(pancreas_unfiltered)


```

```{r}
## DATA PROCESSING
suppressWarnings({
# Reproducibility
  set.seed(2025)
  plan("sequential")
  options(future.seed = TRUE)
# 1. Normalize the data to log2(x+1)
pancreas <- NormalizeData(pancreas, normalization.method = "LogNormalize", scale.factor = 10000, verbose = FALSE)

# 2. Find variable features
pancreas <- FindVariableFeatures(pancreas, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pancreas), 10)
plot1 <- VariableFeaturePlot(pancreas)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE) +
  theme(
    axis.title = element_text(size = 18, face = "bold"),
    axis.text  = element_text(size = 14, face = "bold"),
    plot.title = element_text(size = 20, face = "bold"),
    strip.text = element_text(size = 16, face = "bold")
  )
ggsave(file.path(results_path, "variable_features_top10.png"), plot2, width = 8, height = 6, dpi = 300)

# 3. Scaling
all.genes <- VariableFeatures(pancreas)
pancreas <- ScaleData(pancreas, features = all.genes, verbose = FALSE)

# 4. PCA 
pancreas <- RunPCA(pancreas, features = all.genes, verbose = FALSE)
pca_plot <- DimPlot(pancreas, reduction = "pca", group.by = "sample_type") +
  theme_publication() +
  ggtitle(NULL) +
  theme(
    axis.title = element_text(size = 18, face = "bold"),
    axis.text  = element_text(size = 14, face = "bold"),
    plot.title = element_text(size = 20, face = "bold"),
    strip.text = element_text(size = 16, face = "bold")
  )
ggsave(file.path(results_path, "pca_plot.png"), pca_plot, width = 8, height = 6, dpi = 300)

# 5. Elbow plot
elbow_plot <- ElbowPlot(pancreas, ndims = 50) +
  theme_publication() +
  theme(
    axis.title = element_text(size = 18, face = "bold"),
    axis.text  = element_text(size = 14, face = "bold"),
    plot.title = element_text(size = 20, face = "bold"),
    strip.text = element_text(size = 16, face = "bold")
  )
ggsave(file.path(results_path, "elbow_plot.png"), elbow_plot, width = 8, height = 6, dpi = 300)

# 6. Join layers as required for Seurat v5
pancreas <- JoinLayers(pancreas)

})


```

```{r}
# 7. Harmony
suppressWarnings({

  pancreas <- RunHarmony(pancreas, group.by.vars = c("orig.ident", "dataset"))

# UMAP
pancreas <- RunUMAP(pancreas, reduction = "harmony", dims = 1:15, verbose = FALSE)
pancreas <- FindNeighbors(pancreas, reduction = "harmony", dims = 1:15, verbose = FALSE)
pancreas <- FindClusters(pancreas, resolution = 2.0, verbose = FALSE)
})
umap_cluster <- DimPlot(pancreas, reduction = "umap", label = TRUE, pt.size = 0.5, repel = TRUE) +
  ggtitle("UMAP (Harmony): clusters") + theme_publication()  +NoLegend()
umap_batch <- DimPlot(pancreas, reduction = "umap", group.by = "orig.ident", pt.size = 0.5) +
  ggtitle("UMAP (Harmony): samples") + theme_publication()
umap_condition <- DimPlot(pancreas, reduction = "umap", group.by = "sample_type", pt.size = 0.5) +
  ggtitle("UMAP (Harmony): condition") + theme_publication()

ggsave(file.path(results_path, "umap_clusters.png"), umap_cluster, width = 10, height = 8, dpi = 300)
ggsave(file.path(results_path, "umap_batches.png"), umap_batch, width = 10, height = 8, dpi = 300)
ggsave(file.path(results_path, "umap_conditions.png"), umap_condition, width = 10, height = 8, dpi = 300)



```

```{r}
## CELL ANNOTATION OF THE CLUSTERS
cell_markers <- list(
  Fibroblast = c("COL1A2", "DCN", "LUM"),
  SMC = c("ACTA2", "TAGLN"),
  T_Cell = c("CD3D", "CD3E", "CD2"),
  Ductal = c("KRT19", "TFF1", "FXYD3"),
  Macrophage = c("APOC1", "SPP1", "C1QA"),
  B_Cell = c("MS4A1", "BANK1"),
  Neutrophil = c("S100A9", "G0S2", "CSF3R"),
  Endothelial = c("PECAM1", "VWF", "HSPG2"),
  Plasma_Cell = c("JCHAIN", "MZB1"),
  Mast_Cell = c("TPSAB1", "CPA3", "HPGDS"),
  Progenitors = c("PDX1", "SOX9", "HNF1B"),
  Acinar = c("AMY2A", "PRSS1", "REG1A"),
  Proliferative = c("MKI67", "PCNA")
)
suppressWarnings({
# Create the original marker data frame
marker_df <- data.frame(
  gene = unlist(cell_markers, use.names = FALSE),
  cell_type = rep(names(cell_markers), times = sapply(cell_markers, length)),
  stringsAsFactors = FALSE
)
# Define which cell types go in each plot
group1_celltypes <- c("Fibroblast", "SMC", "Endothelial", "T_Cell", "B_Cell", "Macrophage", "Neutrophil")
group2_celltypes <- c("Ductal", "Acinar", "Progenitors", "Plasma_Cell", "Mast_Cell", "Proliferative")

# Create consistent theme function
create_dotplot_theme <- function() {
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14, face = "bold"),
    axis.text.y = element_text(size = 12, face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    axis.title = element_text(size = 14, face = "bold"),
    panel.grid = element_blank(),
    legend.position = "bottom",
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11),
    strip.text.x = element_text(face = "bold", size = 13)
  )
}

# DotPlot
dp <- DotPlot(
  pancreas, 
  features = cell_markers,
  group.by = "seurat_clusters",
  dot.min = 0, dot.scale = 6
)

# Add cell type info to plot data for facetting
dp$data <- left_join(dp$data, marker_df, by = c("features.plot" = "gene"))

# Plot 1: Filter for first group of cell types
dotplot1 <- dp +
  facet_grid(~cell_type, scales = "free_x", space = "free_x") +
  scale_color_gradientn(colors = c("blue", "yellow", "red"), name = "Average\nExpression") +
  create_dotplot_theme() +
  labs(
    x = "Marker Genes",
    y = "Seurat Clusters",
    title = "Cell Markers Expression"
  )

# Filter the data for plot 1
dotplot1$data <- dotplot1$data[dotplot1$data$cell_type %in% group1_celltypes, ]

# Plot 2: Filter for second group of cell types
dotplot2 <- dp +
  facet_grid(~cell_type, scales = "free_x", space = "free_x") +
  scale_color_gradientn(colors = c("blue", "yellow", "red"), name = "Average\nExpression") +
  create_dotplot_theme() +
  labs(
    x = "Marker Genes",
    y = "Seurat Clusters",
    title = "Cell Markers Expression"
  )

# Filter the data for plot 2
dotplot2$data <- dotplot2$data[dotplot2$data$cell_type %in% group2_celltypes, ]

# Save both plots
ggsave(file.path(results_path, "dotplot1.png"),
       dotplot1, width = 16, height = 8, dpi = 300)

ggsave(file.path(results_path, "dotplot2.png"),
       dotplot2, width = 12, height = 8, dpi = 300)
})
# Display both plots
dotplot1
dotplot2


```

```{r}
# 2. Automatic annotation
# Calculate average expression per cluster
avg_expr <- AggregateExpression(pancreas, assays = "RNA", slot = "data")$RNA
clusters <- colnames(avg_expr)

# Remove 'g' from clusters
clusters_clean <- gsub("^g", "", clusters)

# Score clusters for each cell type using cell markers
celltype_scores <- sapply(names(cell_markers), function(celltype) {
  markers <- cell_markers[[celltype]]
  present <- intersect(markers, rownames(avg_expr))
  if (length(present) == 0) return(rep(NA, ncol(avg_expr)))
  prop_present <- length(present) / length(markers)
  expr <- colMeans(avg_expr[present, , drop = FALSE])
  expr * prop_present
})
celltype_scores <- t(celltype_scores)
colnames(celltype_scores) <- clusters_clean

# Assign best cell type to each cluster
simple_labels <- apply(celltype_scores, 2, function(x) {
  if (all(is.na(x))) return("Unassigned")
  names(x)[which.max(x)]
})

annotation_df <- data.frame(
  Cluster = clusters_clean,
  Cell_Type = simple_labels,
  stringsAsFactors = FALSE
)
annotation_df


```

```{r}
# 3. Manual annotation mapping (almost similar to the automatic annotation)
manual_map <- list(
  "T cells"         = c(0, 1, 2, 3, 17, 20, 26, 28, 32, 36),
  "Neutrophils"     = c(4, 13, 27, 30, 41),
  "B cells"         = c(5, 43),
  "Ductal cells"         = c(6, 9, 15),
  "Fibroblasts"     = c(7, 8, 29, 34, 35, 37, 40, 42, 44),
  "Macrophages"     = c(10, 11, 18, 24, 39, 45),
  "SMCs"            = 12,
  "Mast cells"      = c(14, 46),
  "Endothelial cells"    = 16,
  "Acinar cells"         = c(19, 23, 31, 38),
  "Plasma cells"    = 21,
  "Acinar & Progenitor cells"        = 25,           
  "Proliferative Ductal cells"       = 33,           
  "Proliferative T & Macrophages"    = 22        
)
# Build annotation table
manual_annotation_df <- do.call(rbind, lapply(names(manual_map), function(celltype) {
  data.frame(
    Cluster = as.character(manual_map[[celltype]]),
    Cell_Type = celltype,
    stringsAsFactors = FALSE
  )
}))
manual_annotation_df <- manual_annotation_df[order(as.numeric(manual_annotation_df$Cluster)), ]
manual_annotation_df

# Assign annotation to each cell in Seurat object
pancreas$manual_annotation <- manual_annotation_df$Cell_Type[match(
  as.character(pancreas$seurat_clusters), manual_annotation_df$Cluster
)]

# 4. UMAP grouped by manual annotation
celltype_colors <- c(
  "T cells" = "pink",
  "Macrophages" = "skyblue",
  "Mast cells" = "blue",
  "Neutrophils" = "turquoise",
  "Ductal cells" = "green",
  "Proliferative Ductal cells" = "brown",
  "Fibroblasts" = "yellow",
  "SMCs" = "orange",
  "Endothelial cells" = "darkgreen",
  "B cells" = "gold",
  "Acinar cells" = "red",
  "Acinar & Progenitor cells" = "grey",
  "Proliferative T & Macrophages" = "deeppink",
  "Plasma cells" = "purple"
)

umap_manual <- DimPlot(
  pancreas,
  reduction = "umap",
  group.by = "manual_annotation",
  cols = celltype_colors,
  label = TRUE,
  repel = TRUE,
  label.size = 5,
  label.color = "black",  
  label.box = TRUE      
) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text = element_text(face = "bold"),
    axis.title = element_text(face = "bold"),
    strip.text = element_text(face = "bold")
  ) +
  NoLegend()
ggsave(file.path(results_path, "umap_manual_annotation.png"),
       umap_manual, width = 14, height = 10, dpi = 300)
umap_manual
# 5. Dot plot grouped by manual annotation
marker_genes <- unlist(cell_markers, use.names = FALSE)
dotplot_manual <- DotPlot(
  pancreas,
  features = marker_genes,
  group.by = "manual_annotation",
  dot.min = 0,
  dot.scale = 6
) +
  scale_color_gradientn(
    colors = c("blue", "yellow", "red"),
    name = "Average\nExpression"
  ) +
  theme_minimal() +
  labs(
    x = "Marker Genes",
    y = "Cell Type"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 18, face = "bold"),
    axis.text.y = element_text(size = 18, face = "bold"),
    axis.title.x = element_text(size = 22, face = "bold"),
    axis.title.y = element_text(size = 22, face = "bold") 
  )
  RotatedAxis()
ggsave(file.path(results_path, "dotplot_manual_annotation.png"),
       dotplot_manual, width = 20, height = 10, dpi = 300)
dotplot_manual


```

```{r}
## CELL PROPORTION
# Calculate cell type percentages by condition (in pancreas present in sample_type column)
celltype_condition_table <- pancreas@meta.data %>%
  group_by(sample_type, manual_annotation) %>%
  summarise(n_cells = n(), .groups = "drop") %>%
  group_by(sample_type) %>%
  mutate(
    total_cells = sum(n_cells),
    percentage = round(n_cells / total_cells * 100, 1)
  ) %>%
  ungroup()

# Total number of cells and by condition
total_cells_by_condition <- celltype_condition_table %>%
  group_by(sample_type) %>%
  summarise(total_cells = sum(n_cells))
overall_total <- sum(total_cells_by_condition$total_cells)
overall_total
total_cells_by_condition
comparison_plot <- ggplot(celltype_condition_table, 
                         aes(x = manual_annotation, y = percentage, fill = sample_type)) +
  geom_col(position = "dodge", alpha = 0.8, color = "black", linewidth = 0.3) +
  geom_text(
    aes(label = paste0(percentage, "%")),
    position = position_dodge(width = 0.9),
    hjust = -0.1,   # Put text just outside the bar for clarity
    size = 5,       # Larger text
    fontface = "bold"
  ) +
  scale_fill_manual(values = c("Normal" = "steelblue", "Tumor" = "firebrick")) +
  theme_minimal(base_size = 18) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
    axis.text.y = element_text(face = "bold", size = 18),
    axis.text.x = element_text(face = "bold", size = 18),
    axis.title = element_text(face = "bold", size = 20),
    legend.position = "top",
    legend.title = element_text(size = 18),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank()
  ) +
  labs(
    title = "Cell type composition",
    x = "Cell Type",
    y = "Percentage of Cells (%)",
    fill = "Condition"
  ) +
  scale_y_continuous(limits = c(0, max(celltype_condition_table$percentage) * 1.15)) +
  coord_flip()

ggsave(file.path(results_path, "celltype_percentage_comparison_horizontal.png"), 
       comparison_plot, width = 14, height = 10, dpi = 300)

comparison_plot


```

```{r}
## PHOPSHATASE-RELATED GENES ANALYSIS
create_pseudobulk <- function(seurat_obj, group_by = "sample_id") {
  counts <- GetAssayData(seurat_obj, layer = "counts")
  meta <- seurat_obj@meta.data
  samples <- unique(meta[[group_by]])
  pseudobulk_counts <- matrix(0, nrow = nrow(counts), ncol = length(samples))
  rownames(pseudobulk_counts) <- rownames(counts)
  colnames(pseudobulk_counts) <- samples
  for (sample in samples) {
    cells_in_sample <- rownames(meta[meta[[group_by]] == sample, ])
    if (length(cells_in_sample) > 0) {
      pseudobulk_counts[, sample] <- Matrix::rowSums(counts[, cells_in_sample, drop = FALSE])
    }
  }
  return(pseudobulk_counts)
}

# Create pseudobulk counts
pseudobulk_counts <- create_pseudobulk(pancreas, "sample_id")

# Sample metadata
sample_meta <- pancreas@meta.data %>%
  dplyr::select(sample_id, sample_type, dataset) %>%
  dplyr::distinct() %>%
  dplyr::arrange(sample_id)

# Ensure column order
pseudobulk_counts <- pseudobulk_counts[, sample_meta$sample_id]

# 2. Differential expression
perform_de_analysis <- function(counts, sample_meta) {
  # Filter genes
  keep <- rowSums(counts > 1) >= 3
  counts_filtered <- counts[keep, ]
  dge <- DGEList(counts = counts_filtered)
  dge <- calcNormFactors(dge)
  condition <- factor(sample_meta$sample_type, levels = c("Normal", "Tumor"))
  design <- model.matrix(~ condition)
  colnames(design) <- c("Intercept", "Tumor_vs_Normal")
  dge <- estimateDisp(dge, design)
  fit <- glmQLFit(dge, design)
  qlf <- glmQLFTest(fit, coef = "Tumor_vs_Normal")
  results <- topTags(qlf, n = Inf)$table %>%
    rownames_to_column("gene") %>%
    arrange(FDR)
  return(results)
}
de_results_all <- perform_de_analysis(pseudobulk_counts, sample_meta)

# 3. Volcano Plot of all genes highlighting phosphatase-related genes

de_results_all <- de_results_all %>%
  mutate(
    is_goi = gene %in% genes_of_interest,
    sig_dir = case_when(
      logFC > 1 & FDR < 0.05 ~ "Upregulated",
      logFC < -1 & FDR < 0.05 ~ "Downregulated",
      is_goi ~ "GOI",
      TRUE ~ "Not significant"
    )
  )

volcano_all <- ggplot(de_results_all, aes(x = logFC, y = -log10(FDR))) +
  geom_point(aes(color = sig_dir), size = 2, alpha = 0.7) +
  scale_color_manual(
    values = c(
      "Upregulated" = "red",
      "Downregulated" = "blue",
      "GOI" = "orange",
      "Not significant" = "grey"
    )
  ) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "black", alpha = 0.6) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "black", alpha = 0.5) +
 geom_text_repel(
  data = filter(de_results_all, is_goi),
  aes(label = gene),
  color = "orange",
  size = 3.2,
  fontface = "bold",
  min.segment.length = 0.1,
  max.overlaps = 200  
) +
  labs(
    title = "Differential expression - PAAD (pseudobulk)",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )
ggsave(file.path(results_path, "volcano_plot_all_genes.pdf"), volcano_all, width = 12, height = 8, dpi = 300)
volcano_all

# 4. Volcano plot of the phosphatase-related genes

goi_results <- de_results_all %>%
  filter(is_goi) %>%
  mutate(
    significance = case_when(
      FDR < 0.05 & logFC > 1 ~ "Higher in Tumor",
      FDR < 0.05 & logFC < -1 ~ "Higher in Normal",
      TRUE ~ "Not Significant"
    )
  )
volcano_pp2a <- ggplot(goi_results, aes(x = logFC, y = -log10(FDR), color = significance, label = gene)) +
  geom_point(size = 4, alpha = 0.85) +
  geom_text_repel(
    size = 3.5,
    max.overlaps = 30,
    box.padding = 0.5,
    point.padding = 0.2,
    fontface = "bold",
    min.segment.length = 0.1
  ) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "grey", alpha = 0.7) +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey", alpha = 0.7) +
  scale_color_manual(values = c(
    "Higher in Tumor" = "firebrick",
    "Higher in Normal" = "steelblue",
    "Not Significant" = "grey"
  )) +
  labs(
    title = "Phosphatase-related genes - PAAD (pseudobulk)",
    x = "Log2FC (Tumor vs Normal)",
    y = "-Log10(padj)",
    color = "Significance"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "right",
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11)
  ) +
  coord_cartesian(
    xlim = c(min(goi_results$logFC, na.rm = TRUE) * 1.2, max(goi_results$logFC, na.rm = TRUE) * 1.2),
    ylim = c(0, max(-log10(goi_results$FDR), na.rm = TRUE) * 1.1)
  )
ggsave(file.path(results_path, "volcano_plot_phosphatases_genes.pdf"), volcano_pp2a, width = 12, height = 8, dpi = 300)
volcano_pp2a

# 5. Column bar plots of the significant genes with |log2FC| > 0.25
# Dataframe to collect all significant results

all_significant_results <- data.frame()

# Set minimum cell count threshold
min_cells_per_condition <- 100  # Minimum cells per condition (normal/tumor)
min_total_cells <- 300         # Minimum total cells per cell type

for (gene in genes_of_interest) {
  plot_data <- FetchData(
    pancreas,
    vars = c(gene, "manual_annotation", "sample_type"),
    layer = "data"
  ) %>%
    dplyr::rename(
      expression = !!gene,
      cell_type = manual_annotation,
      condition = sample_type
    )
  
  # Remove NA values
  plot_data <- plot_data[!is.na(plot_data$expression), ]
  
  # Check cell counts per cell type and condition
  cell_counts <- plot_data %>%
    group_by(cell_type, condition) %>%
    summarise(n_cells = n(), .groups = 'drop') %>%
    pivot_wider(names_from = condition, values_from = n_cells, values_fill = 0) %>%
    mutate(
      total_cells = Normal + Tumor,
      min_condition_cells = pmin(Normal, Tumor)
    )
  
  # Filter cell types with sufficient cells
  sufficient_cell_types <- cell_counts %>%
    filter(
      total_cells >= min_total_cells,
      min_condition_cells >= min_cells_per_condition,
      Normal > 0 & Tumor > 0
    ) %>%
    pull(cell_type)
  
  # Filter plot data to only include cell types with sufficient cells
  plot_data_filtered <- plot_data %>%
    filter(cell_type %in% sufficient_cell_types)
  
  # Compute p-values and FCs for each cell type
  pval_df <- plot_data_filtered %>%
    group_by(cell_type) %>%
    filter(length(unique(condition)) == 2) %>%
    summarise(
      n_normal = sum(condition == "Normal"),
      n_tumor = sum(condition == "Tumor"),
      p = tryCatch({
        if(sum(condition == "Normal") > 0 & sum(condition == "Tumor") > 0) {
          wilcox.test(expression ~ condition)$p.value
        } else {
          NA
        }
      }, error = function(e) NA),
      mean_N = mean(expression[condition == "Normal"], na.rm = TRUE),
      mean_T = mean(expression[condition == "Tumor"], na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    mutate(
      # Calculate log2 fold change
      log2FC = mean_T - mean_N,
      # Calculate percent change
      percent_change = (2^log2FC - 1) * 100,
      gene = gene,
      total_cells = n_normal + n_tumor
    ) %>%
    filter(!is.na(p), p < 0.05, abs(log2FC) > 0.25) %>%
    dplyr::select(gene, cell_type, p, n_normal, n_tumor, total_cells, mean_N, mean_T, log2FC, percent_change)
  
  # Add to results collection
  if(nrow(pval_df) > 0) {
    all_significant_results <- rbind(all_significant_results, pval_df)
    
    # Create plot for significant cell types
    sig_cell_types <- pval_df$cell_type
    plot_data_sig <- filter(plot_data_filtered, cell_type %in% sig_cell_types)
   
     # Insert line break in long cell type label
plot_data_sig$cell_type <- gsub("Acinar & Progenitor cells", "Acinar &\nProgenitor cells", plot_data_sig$cell_type)
    column <- ggplot(plot_data_sig, aes(x = cell_type, y = expression, fill = condition)) +
  stat_summary(fun = mean, geom = "col", position = position_dodge(width=0.9), alpha = 0.8) +
  stat_summary(fun.data = mean_se, geom = "errorbar", 
               position = position_dodge(width=0.9), width = 0.3) +
  ggpubr::stat_compare_means(
    aes(group = condition),
    method = "wilcox.test",
    label = "p.signif",
    hide.ns = TRUE,
    bracket.size = 0.6,
    tip.length = 0.03,
    vjust = 0
  ) +
  scale_fill_manual(values = c("Normal" = "steelblue", "Tumor" = "firebrick")) +
  labs(
    title = paste(gene, "Expression"),
    x = "Cell Type",
    y = "Mean Expression"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    axis.title.x = element_text(size = 20, face = "bold", margin = margin(t = 12)),
    axis.title.y = element_text(size = 20, face = "bold", margin = margin(r = 12)),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.text.y = element_text(size = 14),
    plot.title = element_text(face = "bold", size = 22),
    plot.subtitle = element_text(size = 14),
    legend.text = element_text(size = 16),
    legend.title = element_text(size = 16)
  )
    
    print(column)
    ggsave(file.path(results_path, paste0("column_", gene, "_by_celltype.pdf")), 
           column, width = 12, height = 8, dpi = 300)
  } 
}
# Sort results by log2FC
all_significant_results <- all_significant_results %>%
  arrange(desc(log2FC)) %>%
  mutate(
    p,
    mean_N,
    mean_T,
    log2FC,
    percent_change
  )

# Export to CSV
write.csv(all_significant_results, 
          file = file.path(results_path, "significant_genes_pancreatic_scRNA-seq.csv"), 
          row.names = FALSE)
```

